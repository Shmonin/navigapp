// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  telegramId           BigInt    @unique @map("telegram_id")
  username             String?
  firstName            String?   @map("first_name")
  lastName             String?   @map("last_name")
  subscriptionType     String    @default("free") @map("subscription_type")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  trialUsed            Boolean   @default(false) @map("trial_used")
  totalPagesCreated    Int       @default(0) @map("total_pages_created")
  lastActiveAt         DateTime  @default(now()) @map("last_active_at")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  pages         Page[]
  subscriptions Subscription[]

  @@map("users")
}

model Page {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  title          String
  description    String?
  slug           String    @unique
  isPublished    Boolean   @default(false) @map("is_published")
  parentPageId   String?   @map("parent_page_id")
  viewCount      Int       @default(0) @map("view_count")
  clickCount     Int       @default(0) @map("click_count")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentPage     Page?       @relation("PageHierarchy", fields: [parentPageId], references: [id], onDelete: Cascade)
  childPages     Page[]      @relation("PageHierarchy")
  blocks         PageBlock[]
  analyticsEvents AnalyticsEvent[]

  @@map("pages")
}

model PageBlock {
  id          String   @id @default(uuid())
  pageId      String   @map("page_id")
  type        String   // 'vertical_list', 'grid', 'horizontal_scroll', 'feed'
  title       String?
  description String?
  position    Int
  settings    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  page  Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  cards BlockCard[]

  @@unique([pageId, position])
  @@map("page_blocks")
}

model BlockCard {
  id                  String   @id @default(uuid())
  blockId             String   @map("block_id")
  title               String
  description         String?
  iconUrl             String?  @map("icon_url")
  backgroundImageUrl  String?  @map("background_image_url")
  linkUrl             String?  @map("link_url")
  linkType            String   @default("external") @map("link_type") // 'external', 'internal'
  internalPageId      String?  @map("internal_page_id")
  position            Int
  clickCount          Int      @default(0) @map("click_count")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  block           PageBlock        @relation(fields: [blockId], references: [id], onDelete: Cascade)
  internalPage    Page?            @relation(fields: [internalPageId], references: [id], onDelete: SetNull)
  analyticsEvents AnalyticsEvent[]

  @@unique([blockId, position])
  @@map("block_cards")
}

model AnalyticsEvent {
  id               String   @id @default(uuid())
  pageId           String   @map("page_id")
  eventType        String   @map("event_type") // 'view', 'click', 'share'
  cardId           String?  @map("card_id")
  userTelegramId   BigInt?  @map("user_telegram_id")
  sessionId        String   @map("session_id")
  ipAddress        String?  @map("ip_address")
  userAgent        String?  @map("user_agent")
  referrer         String?
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  page Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)
  card BlockCard? @relation(fields: [cardId], references: [id], onDelete: SetNull)

  @@index([pageId])
  @@index([createdAt])
  @@map("analytics_events")
}

model Subscription {
  id                  String   @id @default(uuid())
  userId              String   @map("user_id")
  type                String   // 'trial', 'monthly', 'yearly'
  status              String   // 'active', 'cancelled', 'expired', 'pending'
  tbankSubscriptionId String?  @map("tbank_subscription_id")
  amount              Int      // в копейках
  currency            String   @default("RUB")
  startedAt           DateTime @map("started_at")
  expiresAt           DateTime @map("expires_at")
  autoRenewal         Boolean  @default(true) @map("auto_renewal")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@index([userId])
  @@index([status])
  @@map("subscriptions")
}

model Payment {
  id               String    @id @default(uuid())
  subscriptionId   String    @map("subscription_id")
  tbankPaymentId   String?   @unique @map("tbank_payment_id")
  amount           Int
  currency         String    @default("RUB")
  status           String    // 'pending', 'success', 'failed', 'refunded'
  paymentMethod    String?   @map("payment_method")
  errorMessage     String?   @map("error_message")
  processedAt      DateTime? @map("processed_at")
  createdAt        DateTime  @default(now()) @map("created_at")

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payments")
}