import { Context, Telegraf } from 'https://deno.land/x/grammy@v1.21.1/mod.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

interface BotUser {
  id: number;
  first_name: string;
  username?: string;
  language_code?: string;
}

interface BotContext extends Context {
  from?: BotUser;
}

class NavigappBot {
  private bot: Telegraf<BotContext>;
  private supabase: any;
  private apiBaseUrl: string;

  constructor(botToken: string, supabaseUrl: string, supabaseKey: string) {
    this.bot = new Telegraf<BotContext>(botToken);
    this.supabase = createClient(supabaseUrl, supabaseKey);
    this.apiBaseUrl = 'https://zcvaxzakzkszoxienepi.supabase.co/functions/v1/navigapp-api-v3';

    this.setupHandlers();
  }

  private setupHandlers() {
    // /start command handler
    this.bot.command('start', this.handleStart.bind(this));

    // /login command handler
    this.bot.command('login', this.handleLogin.bind(this));

    // /help command handler
    this.bot.command('help', this.handleHelp.bind(this));

    // Deep link handler for return from WebApp
    this.bot.on('web_app_data', this.handleWebAppData.bind(this));

    // Handle unknown commands
    this.bot.on('message', this.handleUnknownCommand.bind(this));
  }

  /**
   * Handle /start command - first-time registration
   */
  private async handleStart(ctx: BotContext) {
    if (!ctx.from) return;

    try {
      const telegramUser = ctx.from;
      const welcomeMessage = `üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–∞–≤–∏–≥–∞–ø–ø!*

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–∏—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø.

*–ß—Ç–æ —É–º–µ–µ—Ç –ù–∞–≤–∏–≥–∞–ø–ø:*
‚Ä¢ üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ üîó –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –∫–ª–∏–∫–æ–≤
‚Ä¢ üé® –ö—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏

*–¢–∞—Ä–∏—Ñ—ã:*
‚Ä¢ **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ**: 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ 8 –∫–∞—Ä—Ç–æ—á–µ–∫
‚Ä¢ **Pro**: –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá`;

      // Initiate bot auth process
      const authResponse = await this.initiateAuth(telegramUser);

      if (!authResponse.success) {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      // Send welcome message with WebApp button
      await ctx.reply(welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: authResponse.data.deep_link_url }
              }
            ],
            [
              { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
              { text: 'üíé –¢–∞—Ä–∏—Ñ—ã', callback_data: 'pricing' }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('Start command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /start');
    }
  }

  /**
   * Handle /login command - for existing users
   */
  private async handleLogin(ctx: BotContext) {
    if (!ctx.from) return;

    try {
      const telegramUser = ctx.from;

      // Check if user exists
      const { data: existingUser } = await this.supabase
        .from('users')
        .select('id, first_name, subscription_type, total_pages_created')
        .eq('telegram_id', telegramUser.id)
        .single();

      let message = '';

      if (existingUser) {
        // Existing user
        message = `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${existingUser.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –¢–∞—Ä–∏—Ñ: ${existingUser.subscription_type === 'pro' ? 'üíé Pro' : 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${existingUser.total_pages_created}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;
      } else {
        // New user
        message = `üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, –≤—ã –≤–ø–µ—Ä–≤—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ù–∞–≤–∏–≥–∞–ø–ø.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`;
      }

      // Initiate auth process
      const authResponse = await this.initiateAuth(telegramUser);

      if (!authResponse.success) {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: authResponse.data.deep_link_url }
              }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('Login command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /login');
    }
  }

  /**
   * Handle /help command
   */
  private async handleHelp(ctx: BotContext) {
    const helpMessage = `‚ùì *–ü–æ–º–æ—â—å –ø–æ –ù–∞–≤–∏–≥–∞–ø–ø*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
‚Ä¢ /login - –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /login
2. –û—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
4. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –≥—Ä—É–ø–ø–µ

*–¢–∞—Ä–∏—Ñ—ã:*
‚Ä¢ **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ**: 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ 8 –∫–∞—Ä—Ç–æ—á–µ–∫
‚Ä¢ **Pro (299‚ÇΩ/–º–µ—Å)**: –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @kirillshmonin

*–í–µ–±-–≤–µ—Ä—Å–∏—è:* https://navigapp.vercel.app`;

    await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
  }

  /**
   * Handle WebApp data return
   */
  private async handleWebAppData(ctx: BotContext) {
    if (!ctx.webAppData) return;

    try {
      const data = JSON.parse(ctx.webAppData.data);

      if (data.type === 'auth_completed') {
        await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      } else if (data.type === 'page_created') {
        await ctx.reply(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${data.page_title}" —Å–æ–∑–¥–∞–Ω–∞!\n\nüîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: ${data.page_url}`);
      }

    } catch (error) {
      console.error('WebApp data handling error:', error);
    }
  }

  /**
   * Handle unknown commands and messages
   */
  private async handleUnknownCommand(ctx: BotContext) {
    const message = `ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /login - –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ /help - –ü–æ–º–æ—â—å

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;

    if (ctx.from) {
      // Provide quick access to app
      const authResponse = await this.initiateAuth(ctx.from);

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: authResponse.data?.deep_link_url || 'https://navigapp.vercel.app' }
              }
            ]
          ]
        }
      });
    } else {
      await ctx.reply(message, { parse_mode: 'Markdown' });
    }
  }

  /**
   * Initiate bot authentication process
   */
  private async initiateAuth(telegramUser: BotUser) {
    try {
      const response = await fetch(`${this.apiBaseUrl}/auth/bot/initiate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegram_id: telegramUser.id.toString(),
          user_data: {
            first_name: telegramUser.first_name,
            username: telegramUser.username,
            language_code: telegramUser.language_code,
          }
        })
      });

      const result = await response.json();
      return result;

    } catch (error) {
      console.error('Auth initiation error:', error);
      return {
        success: false,
        error: { message: 'Failed to initiate auth', code: 'API_ERROR' }
      };
    }
  }

  /**
   * Start the bot
   */
  public start() {
    console.log('ü§ñ Navigapp Bot starting...');
    this.bot.launch();

    // Enable graceful stop
    process.once('SIGINT', () => this.bot.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot.stop('SIGTERM'));

    console.log('‚úÖ Navigapp Bot started successfully!');
  }

  /**
   * Stop the bot
   */
  public stop() {
    this.bot.stop();
    console.log('üõë Navigapp Bot stopped.');
  }
}

// Export for use in different environments
export { NavigappBot };

// Auto-start if running as main script
if (import.meta.main) {
  const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN');
  const supabaseUrl = Deno.env.get('SUPABASE_URL');
  const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

  if (!botToken || !supabaseUrl || !supabaseKey) {
    console.error('‚ùå Missing required environment variables:');
    console.error('- TELEGRAM_BOT_TOKEN');
    console.error('- SUPABASE_URL');
    console.error('- SUPABASE_SERVICE_ROLE_KEY');
    Deno.exit(1);
  }

  const bot = new NavigappBot(botToken, supabaseUrl, supabaseKey);
  bot.start();
}